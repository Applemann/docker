#!/bin/bash
#
#  Copyright (c) 2017 Martin Jablečník      
#  Authors: Martin Jablečník
#  Description: Script for build teamzeus docker images
#
#

set -e

DEFAULT_TAG=latest
DEFAULT_DOCKER_ID=applemann
TAG=$DEFAULT_TAG
DOCKER_ID=$DEFAULT_DOCKER_ID


args=("$@")
SWITCH=0

while [ $SWITCH -lt $# ]; 
do
    if [[ ${args[$SWITCH]} == '-v' ]]; then
        VERBOSE=true
        (( SWITCH += 1 ))

    elif [[ ${args[$SWITCH]} == '-vv' ]]; then
        VERBOSE=true
        MORE_VERBOSE=true
        (( SWITCH += 1 ))

    elif [[ ${args[$SWITCH]} == '-p' ]]; then
        PUSH=true
        (( SWITCH += 1 ))

    elif [[ ${args[$SWITCH]} == '-t' ]]; then
        TAG=${args[ (( SWITCH += 1 )) ]}
        (( SWITCH += 1 ))
    elif [[ ${args[$SWITCH]} == '-n' ]]; then
        DOCKER_ID=${args[ (( SWITCH += 1 )) ]}
        (( SWITCH += 1 ))
    else
        echo "Building image: ${args[$SWITCH]}"
        break
    fi
done



IMAGE=$(echo ${args[$SWITCH]} | sed -e "s/\///g") 
DOCKER_IMAGES=$(ls -d */ | sed -e "s/\///g")
CONTAINER=$(echo $IMAGE | sed -e "s/-/_/g")
IMAGE_OUTPUT=$DEFAULT_DOCKER_ID/$IMAGE:$DEFAULT_TAG
BASE_IMAGE=
image_exists=


function update_project () {
    project_name=$1
    user=Team-Zeus
    branch=master
    if [[ -n $2 ]]; then user=$2; fi
    if [[ -n $3 ]]; then branch=$3; fi

    if [[ ! -d $IMAGE/git-repo ]]; then 
        git clone git@github.com:$user/$project_name.git $IMAGE/git-repo
        cd $IMAGE/git-repo; git checkout $branch; cd ../.. 
    else
        cd $IMAGE/git-repo; git pull origin $branch; cd ../.. 
    fi                                                   
}

function build_image () {
    if [[ $BASE_IMAGE != $IMAGE && $BASE_IMAGE != '' ]]; then
        if [[ $MORE_VERBOSE == true ]]; then
            $0 -v $BASE_IMAGE
        else
            $0 $BASE_IMAGE
        fi
    fi

    if [[ $VERBOSE == true ]]; then
        echo -e "Building: $IMAGE_OUTPUT \n"
    fi

    if [[ $VERBOSE == true ]]; then
        docker build $IMAGE -t $IMAGE_OUTPUT
    else
        docker build $IMAGE -t $IMAGE_OUTPUT > /dev/null
    fi
}

function remove_container_if_exists () {
    if [ $(docker ps --filter "name=$1" --format "{{.Names}}" != '') ]; then
        docker kill $1
        echo y | docker container prune > /dev/null
    fi
}


for image in $DOCKER_IMAGES; do
    if [[ $image == $IMAGE ]]; then
        image_exists=true
    fi
done

if [[ $IMAGE == help ]]; then 
    echo "
This program is for building docker images.
You need give name of image as argument.
You can also add various parameters for extension:
    -v          -- show build output for current image
    -vv         -- show build output for all building image (script automaticaly build also our baseimage if exists)
    -t [tag]    -- create tag after build
    -p          -- after build push to $DEFAULT_DOCKER_ID dockerHub



    Example:
        ./BuildImage -p -v -t 3.4 python        ## creates python image with tag 3.4 and push to dockerHub


"
    exit 0
fi

if [[ -z $image_exists ]]; then 
    echo "For '$IMAGE' doesn't exists Dockerfile."
    exit 1
fi

if [[ -n $2 ]]; then
    set -o posix
    alias docker="docker $(echo $@ | cut -d' ' -f2-)"
fi


case $IMAGE in
    *)
        build_image
        ;;
esac



if [[ $VERBOSE == true ]]; then
    echo -e "\n"
    echo "Image '$IMAGE_OUTPUT' was successfully built."
    echo "----------------------------------------------------------------------------------------------------"
    echo ""
                                  
    echo "Run container by command: "
    echo "docker run -p {your_port}:{docker_port} --name $CONTAINER -itd $IMAGE_OUTPUT"

    echo ""
    echo "Push image into DockerHub by command:"
    echo "docker login && docker push $IMAGE_OUTPUT"
    echo -e "\n\n\n\n"
else
    echo $IMAGE_OUTPUT
fi


if [[ -n $TAG ]]; then
    bash -c "./dockerManager tag $IMAGE $TAG"
    echo -e "\n\n"
fi

if [[ $PUSH == true ]]; then
    if [[ $TAG != $DEAFULT_TAG ]]; then
        echo "docker push $DOCKER_ID/$IMAGE:$DEFAULT_TAG"
        bash -c "docker push $DOCKER_ID/$IMAGE:$DEFAULT_TAG"
    fi

    echo "docker push $DOCKER_ID/$IMAGE:$TAG"
    bash -c "docker push $DOCKER_ID/$IMAGE:$TAG"
fi

